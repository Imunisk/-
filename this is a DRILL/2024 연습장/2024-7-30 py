# this is a Drill
# The most topics which has been dealed this week's class could be refered as, Python and Jupiter Notebook and HTML and the Pandas module.
# Be steady, Go for it.


# Markdown & HTML law

# Header1
###### Header6
<h1> Header1 </h>
<span style = 'line-height : 50px;
font-size : 20px, font-weight : bold'> 글 </span>

# 데이터 과학이란 데이터를 연구하여 데이터 엔지니어, 분석가 등의 직무를 수행한다. 데이터를 가공하고 수치적인 통계 데이터를 확인하고, 탐색적 데이터 분석을 통해 시각화 하게 된다.
# 넘파이 패키지, 판다스, Matplotlib
# 넘파이는 계산 관련
# Pandas는 빅데이터 관련
# tensorflow는 빅디이터,머신러닝 둘다 걸침.   



# 넘파이
lst1= [1,2,3,4,5]
import numpy as np
np1 = np.array(lst1)

# 넘파이로 배열 만드는 법 3개. 더 있을까?
# 1
import numpy as np
lst = [1,2,3,4,5]
np1 = np.array(lst)
# 2
import numpy as np
np2 = np.array([1,2,3,4,5])
# 3
import numpy as np
np3 = np.arange(1,6,1)

'''
이하, import np 생략한다 
'''



# n차원
# 1차원
np_d1 = np.array([1,2,3]) 
# 2차원
np_d2 = np.array([[1,2,3],[4,5,6]])


# e.g_)
# 10 percent increased
import numpy as np
item_price = [1000,2000,2500,3000]
np_price = np.array(item_price)
np_new_price = np_price * 1.1
# e.g_)
# average for mid term and final exam
mid = np.array([70,90,80,100])
fin = np.array([90,60,90,100])
avg = (mid+fin) /2


# 넘파이 속성
np_test = np.array([[1,2,3],[4,5,6]])
print(np_test.ndim)
print(np_test.shape)
print(np_test.size)
print(np_test.itemsize)
print(np_test.dtype)

#결과
'''
2
(2,3)
6
4      # 4byte
int32  # 32bit
'''

# 넘파이 함수들
# numpy.arange()            R... r이 한개다!
np_arange(0.1, 1.0, 0.1)  # 이렇게 실수로도 가능
# reshape（)메서드
np_array1 = np.arange(1,10).reshape(3,3)


#
# np.sum() np.mean() np.max() np.median()
# np.std() np.var() np.argmin()
# f(x)=y에서  y가 최대(최소)가 되는 x인자(argument)

# e.g_)
# list_oct 리스트에 10월 온도들이 들어있다.
np_oct = np.array(list_oct)
'''
np_oct.mean()은 온도의 평균, np.median(np_oct)은 온도의 중앙값.
주의할 점: 메디안은 넘파일배열은 인자로 갖는다.
np_oct.max()는 최고온도, np_oct.argmax()+1 은 최고온도가 있었던 일자.
주의할 점: 인덱스는 0부터니까 플러스 1

분산은 variance
표준편차는 Standard Deviation
중앙값은 데이터를 오름차순 정렬했을때 정 중앙에 있는 데이터.
편차. deviation은 합하면 +- 되어 거의 0에 수렴하는
아주 작은 값이다.
따라서 variance. 분산 구할땐, 증폭을 위해 제곱을 해주고 합했다.
이 분산에 제곱근을 씌우면 std 표준편차이다.
'''

# 리스트처럼 넘파이도 인덱싱,슬라이싱 가능하다.
# 주의할 점은: 직접 숫자로 인덱스를 넣는 경우, bracket이 더블로 있어야.   e.g_) np1[[1,35]] = [1,1,1]

# 조건을 달아 원하는 값아 선택하기
# = 논리적 인덱싱
# e.g_)
# 평균기온보다 높은 온도는 몇도 인지
# 우선, 평균보다 높은 것. 그걸 불리언이 들은 배열로 만들고, 그 배열은 sum을 활용해 True갯수를 더한다.
# list_oct 리스트에 10월 온도들이 들어있다.
np_oct = np.array(list_oct)
days = np_oct > np_oct.mean()
print(days.sum())
# 이 코드로 높은 날이 며칠이 있었는지 세어보았다.
# 다음, 넘파이에 이 days 배열을 인덱스로 넣는다.
np_oct[days]


# concatenate 결합과 분리
# 우선, 배열의 conca와 transpose. 결합과 전치.
# 1차원일 경우 그대로 길게 1차원이 되고
# 2차원일 경우 두가지 갈래가 있다.
# axis=0이면 행을 기준으로 conca.
# 1이면 열을 기준으로 풀붙여서 conca


